'''
Run after 'automated_simulation.py'. Strings together scripts to automate
analysis of simulations. Like automated_analysis.py, but calls scripts
that locate sites that are not perfectly conserved and only consider
8mers whose nucleotides overlap these sites. User inputs data folder where a
'simulations' subfolder has been generated, stats folder where data will be
written to (be careful not to overwrite existing results), the path to a miRNA
file, and replicates to analyze in a range from rep_start to rep_end.

Dependencies:
1. Successfully completed 'automated_simulation.py' or 'all_together.py'
2. file containing miRNAs (or other 8mers) of interest for statistical analysis
(generated by populate_real_mers.py)

User-configurable parameters:
1. data_folder where simulations are located and output will go
2. name of output folder where stats will go (created within the data folder)
3. full path to file with miRNAs to be analyzed
4. desired range of replicate numbers to analyze (rep_start inclusive, rep_end
exclusive)
5. desired name of mask file (file containing SNS locations)
'''


import subprocess
import tree_manips
import time

#configurable parameters in this section:
data_folder='/home/alfred/big_data/turnover_rates/4-28-15_deeper_phylogeny/'
stats_folder=data_folder+'paper_test_perfect_8mers/'
miRNA_file='/mnt/md0/alfred/turnover_rates/real_eightmers_human_mouse_fish_best'
rep_start, rep_end='0','100'
mask_file=stats_folder+'single_nucleotide_substitutions'

subprocess.call(['mkdir', stats_folder])
print 'making single nucleotide substitution mask'
subprocess.call(['python', 'locate_SNSs.py', data_folder, mask_file])

print 'counting real turnover events'
subprocess.call(['python', 'count_real_minus_perfect.py', data_folder, stats_folder, mask_file])

#calculates every real 8mer's standard deviations relative to the mean of its
#simulated values, outputs to stats folder. Very slow, memory intensive
print 'making distributions'
subprocess.call(['python', 'make_distributions_minus_perfect_expanded.py', stats_folder, rep_start, rep_end, mask_file])

print 'pulling out the std devs for conserved miRNAs relative to the full dataset'
subprocess.call(['python', 'sig_miRNAs.py', stats_folder, miRNA_file])

#ranks miRNA gain and loss rates relative to other 8mers and send to files
print 'ranking miRNAs'
subprocess.call(['python', 'extract_miRNA_ranks.py', stats_folder, miRNA_file])

#plots the ranks from extract_miRNA_ranks.py
print 'plotting miRNA ranks'
subprocess.call(['python', 'gains_vs_losses.py', stats_folder])

#bins all 8mers and conserved miRNAs by their observed number of std devs away
#from simulated values, calculates stats for each bin
print 'binning all 8mers and miRNA 8mers into stdev bins'
subprocess.call(['python', 'bin_distributions.py', stats_folder])

print 'graphing the bins'
subprocess.call(['python', 'graph_distributions_matplotlib.py', stats_folder])
