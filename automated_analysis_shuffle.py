'''
Strings together several scripts to automate analysis.

This version should be run after running all_together.py. It redoes the
simulation and analysis portion of all_together.py, using a shuffled 3' UTR
(generated by shuffle_alignment.py) instead of actual 3' UTRs.
'''


import subprocess
import tree_manips
import time

data_folder='/mnt/hulk_tank/alfred_stuff/silver_surfer/Grimson_new_phylogeny/data/other_data/shuffled_UTRs/'
miRNA_file='/mnt/hulk_tank/alfred_stuff/silver_surfer/Grimson_new_phylogeny/data/real_eightmers_human_mouse_fish_best'
target_species=['hg38', 'oryCun2', 'nomLeu3', 'susScr3', 'calJac3', 'canFam3', 'macFas5', 'bosTau8', 'mm10', 'monDom5'] #reference genome is mandatory and must be listed first
stats_folder=data_folder+'stats/'
subprocess.call(['mkdir', stats_folder])
rep_start, rep_end='0','100'

print 'generating mutation table'
subprocess.call(['python', 'generate_scaled_trinucleotide_table.py', data_folder])

print 'grabbing correct ancestor species number'
reference_ancestor=open('reference_ancestor').readline()

print 'simulating randomly mutated descendants from ancestral sequences, this may take some time'
subprocess.call(['python', 'simulate_di_turnover_trimers.py', data_folder, rep_start, rep_end, target_species[0], reference_ancestor])

print 'counting real turnover events'
subprocess.call(['python', 'count_real.py', data_folder, stats_folder])

#calculates every real 8mer's standard deviations relative to the mean of its
#simulated values, outputs to stats folder. Very slow, memory intensive
print 'making distributions'
subprocess.call(['python', 'make_distributions_expanded.py', stats_folder, rep_start, rep_end])

#ranks miRNA gain and loss rates relative to other 8mers and send to files
print 'ranking miRNAs'
subprocess.call(['python', 'extract_miRNA_ranks.py', stats_folder, miRNA_file])

#plots the ranks from extract_miRNA_ranks.py
print 'plotting miRNA ranks'
subprocess.call(['python', 'gains_vs_losses.py', stats_folder])


#bins all 8mers and conserved miRNAs by their observed number of std devs away
#from simulated values, calculates stats for each bin
print 'binning all 8mers and miRNA 8mers into stdev bins'
subprocess.call(['python', 'bin_distributions.py', stats_folder])

print 'graphing the bins'
subprocess.call(['python', 'graph_distributions_matplotlib.py', stats_folder])
