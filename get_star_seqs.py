'''
A program to retrieve star seeds of miRNAs
Pseudocode:
Get human mir names associated with seed
Get mature sequences associated with names (and star names and sequences)
Find mature sequences that are the most conserved
Get stars of these mature sequences (sometimes one mature sequence will have
multiple star sequences due to paralogs with identical mature sequences or even
multiple star sequences associated with one hairpin due to alternative
processing).

Dependencies:
1. An input mirfile generated by populate_real_mers.py or remove_mir_subset.py
2. A table relating mir names to mature sequences (provided, from mirbase)
3. A file listing how conserved each mature miRNA is (provided, from
mir_conservation_levels.py)

Input parameters:
1. Name of mirfile whose star sequences to extract.
2. name of table linking mature sequences to names.
3. name of file with conservation levels of mature miRNAs
4. Desired name of output file
'''
import custom

#input parameters here:
mirfile='/home/alfred/grimson_postdoc/big_data/turnover_rates/real_eightmers_human_mouse_fish_best'
mir_table='mirbase_21_table_fixed.tsv'
conservation_file='mature_mir_branch_lengths'
output_file=open('real_eightmers_human_mouse_fish_best_stars', 'w')

seed_names=[line.strip().split('\t')[1] for line in open(mirfile)]
conservation_dict={line.strip().split()[0]:float(line.strip().split()[2]) for line in open(conservation_file)}

def make_name_dict(input_table):
	name_dict, mature_dict={},{}
	for line_number, line in enumerate(open(input_table)):
		if line_number>0 and 'hsa' in line:
			line=line.strip().split('\t')
#			print line
			if line[4] not in name_dict:
				name_dict[line[4]]=[]
			if line[5] not in mature_dict:
				mature_dict[line[5]]=[]
			mature_dict[line[5]].append(line[4])
			if len(line)>6:
				name_dict[line[4]].append([line[5], line[7]])
				if line[7] not in name_dict:
					name_dict[line[7]]=[]
				if line[8] not in mature_dict:
					mature_dict[line[8]]=[]
				mature_dict[line[8]].append(line[7])
				name_dict[line[7]].append([line[8], line[4]])
			else:
				name_dict[line[4]].append([line[5], 'no_star'])
	return name_dict, mature_dict

def get_sequences(seed_names, name_dict):
	seq_list=[]
	for seed in seed_names:
		seed=seed.split(', ')
		small_list=[]
		for name in seed:
			seqs=[element[0] for element in name_dict[name]]
			small_list.extend(seqs)
		seq_list.append(small_list)
	return seq_list

def get_most_conserved(mature_seqs, conservation_dict):
	most_conserved=['blah', 0]
	for mature in mature_seqs:
		if mature in conservation_dict and conservation_dict[mature]>most_conserved[1]:
			most_conserved=[mature, conservation_dict[mature]]
	return most_conserved

name_dict, mature_dict=make_name_dict(mir_table)
seq_list=get_sequences(seed_names, name_dict)
#print seq_list
for seed in seq_list:
	mature, length=get_most_conserved(seed, conservation_dict)
	putative_star_seqs=[]
	seqs=list(set(mature_dict[mature]))
	original_seed_site=custom.revcom(mature[1:8])+'A'
	original_names=', '.join(list(set(mature_dict[mature])))
	for seq in seqs:
		star_names=[line[1] for line in name_dict[seq]]
		if 'no_star' in star_names:
			star_names.remove('no_star')
		for star_name in star_names:
			putative_star_seqs.extend([line[0] for line in name_dict[star_name]])
	final_seeds=set([custom.revcom(putative[1:8])+'A' for putative in putative_star_seqs])
	for final_seed in final_seeds:
		output_file.write('\t'.join([final_seed, original_seed_site, mature, original_names])+'\n')
