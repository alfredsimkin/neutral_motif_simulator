'''
Run after 'automated_simulation.py'. Strings together scripts to automate
analysis of simulations. Useful if the simulations have been generated already
but analyis needs to be run in a different way. User inputs data folder where a
'simulations' subfolder has been generated, stats folder where data will be
written to (be careful not to overwrite existing results), the path to a miRNA
file, and replicates to analyze in a range from rep_start to rep_end.

Dependencies:
1. Successfully completed 'automated_simulation.py' or 'all_together.py'
2. file containing miRNAs (or other 8mers) of interest for statistical analysis
(generated by populate_real_mers.py)

User-configurable parameters:
1. data_folder where simulations are located and output will go
2. name of output folder where stats will go (created within the data folder)
3. full path to file with miRNAs to be analyzed
4. desired range of replicate numbers to analyze (rep_start inclusive, rep_end
exclusive)
'''


import subprocess
import tree_manips
import time

#Configurable options in this section:
data_folder='/home/alfred/big_data/turnover_rates/4-28-15_deeper_phylogeny/' #tell the program where your bed file is located (output will also go here)
stats_folder=data_folder+'human_mouse_fish_stars_final/' #name this folder with a name unique to the current analyses
miRNA_file='/home/alfred/big_data/turnover_rates/real_eightmers_human_mouse_fish_best_stars'
rep_start, rep_end='0','100'

#main body in this section:
subprocess.call(['mkdir', stats_folder])

print 'counting real turnover events'
subprocess.call(['python', 'count_real.py', data_folder, stats_folder])

print 'making distributions'
subprocess.call(['python', 'make_distributions_expanded.py', stats_folder, rep_start, rep_end])

#ranks miRNA gain and loss rates relative to other 8mers and send to files
print 'ranking miRNAs'
subprocess.call(['python', 'extract_miRNA_ranks.py', stats_folder, miRNA_file])

#plots the rates from extract_miRNA_ranks.py
print 'plotting miRNA ranks'
subprocess.call(['python', 'gains_vs_losses.py', stats_folder])

#bins all 8mers and conserved miRNAs by their observed number of std devs away
#from simulated values, calculates stats for each bin
print 'binning all 8mers and miRNA 8mers into stdev bins'
subprocess.call(['python', 'bin_distributions.py', stats_folder])

print 'graphing the bins'
subprocess.call(['python', 'graph_distributions_matplotlib.py', stats_folder])
