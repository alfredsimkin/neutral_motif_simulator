'''
Takes dictionaries generated by map_probes_to_genes2.py, filters out probes
that map to multiple genes, calculates geometric means of expression levels,
and ranks expression levels of all genes in each tissue from lowest to highest
(tissue centric). Also ranks expression levels of all tissues in each gene from
lowest to highest.
'''
import cPickle
import sys
data_folder=sys.argv[1]
gene_dict=cPickle.load(open(data_folder+'gene_dict', 'rb'))
probe_dict=cPickle.load(open(data_folder+'probe_dict', 'rb'))
exp_dict=cPickle.load(open(data_folder+'exp_dict', 'rb'))
def find_bad_probes(probe_dict):
	bad_probes=set([])
	for probe in probe_dict:
		gene_list=probe_dict[probe]
		gene_set=set(gene_list)
		if len(gene_set)>1:
			bad_probes.add(probe)
		if len(gene_list)>len(gene_set):
			probe_dict[probe]=list(gene_set)
	return bad_probes, probe_dict

def remove_bad_probes(probe_dict, gene_dict, bad_probes):
	bad_genes=set([])
	for gene in gene_dict:
		gene_dict[gene]=list(set(gene_dict[gene])-bad_probes)
		if len(gene_dict[gene])==0:
			bad_genes.add(gene)
	for probe in bad_probes:
		probe_dict.pop(probe)
	for gene in bad_genes:
		gene_dict.pop(gene)
	return gene_dict, probe_dict

def make_exp_dicts(exp_dict, gene_dict):
	gene_exp_dict, tissue_exp_dict={}, {}
	for gene in gene_dict:
		probe_list=gene_dict[gene]
		for tissue in exp_dict[probe_list[0]]:
			the_sum=0
			for probe in probe_list:
				the_sum=the_sum+exp_dict[probe][tissue]
			mean=the_sum/float(len(probe_list))
			if tissue not in tissue_exp_dict:
				tissue_exp_dict[tissue]=[]
			tissue_exp_dict[tissue].append([mean, gene])
			if gene not in gene_exp_dict:
				gene_exp_dict[gene]=[]
			gene_exp_dict[gene].append([mean, tissue])
	return gene_exp_dict, tissue_exp_dict

def sort_dict(input_dict):
	for the_key in input_dict:
		input_dict[the_key].sort()
	return input_dict

bad_probes, probe_dict=find_bad_probes(probe_dict)
gene_dict, probe_dict=remove_bad_probes(probe_dict, gene_dict, bad_probes)
gene_exp_dict, tissue_exp_dict=make_exp_dicts(exp_dict, gene_dict)
gene_exp_dict=sort_dict(gene_exp_dict)
tissue_exp_dict=sort_dict(tissue_exp_dict)
cPickle.dump(tissue_exp_dict, open(data_folder+'tissue_exp_dict', 'wb'), -1)
cPickle.dump(gene_exp_dict, open(data_folder+'gene_exp_dict', 'wb'), -1)
print len(tissue_exp_dict['TestisIntersitial'])
print len(gene_exp_dict['NM_001032'])
